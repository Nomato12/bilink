import 'package:flutter/material.dart';
import 'package:bilink/services/notification_service.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:bilink/services/chat_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:bilink/screens/chat_screen.dart';
import 'package:bilink/utils/location_helper.dart';

class ClientDetailsScreen extends StatefulWidget {
  final String clientId;

  const ClientDetailsScreen({super.key, required this.clientId});

  @override
  State<ClientDetailsScreen> createState() => _ClientDetailsScreenState();
}

class _ClientDetailsScreenState extends State<ClientDetailsScreen> {
  final NotificationService _notificationService = NotificationService();
  final FirebaseAuth _auth = FirebaseAuth.instance;

  bool _isLoading = true;
  Map<String, dynamic> _clientDetails = {};
  String? _errorMessage;

  // خريطة جوجل لعرض موقع العميل
  GoogleMapController? _mapController;
  Set<Marker> _markers = {};
  CameraPosition? _initialCameraPosition;

  // تحقق من وجود بيانات موقع ووجهة للعميل
  bool _hasTransportRequestData = false;
  LatLng? _originLocation;
  LatLng? _destinationLocation;
  String _originName = '';
  String _destinationName = '';
  String _distanceText = '';
  String _durationText = '';
  double _price = 0;
  String _vehicleType = '';

  @override
  void initState() {
    super.initState();
    _loadClientDetails();
  }
  Future<void> _loadClientDetails() async {
    try {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });

      // تحميل معلومات العميل الأساسية
      final clientDetails = await _notificationService.getClientDetails(
        widget.clientId,
      );
      
      // Handle client location from clientDetails if available
      if (clientDetails.containsKey('location') && clientDetails['location'] != null) {
        var locationData = clientDetails['location'];
        print('Client location data found: $locationData');
        
        // If we have location data, initialize client map markers
        try {
          // Extract latitude and longitude from the location data
          if (locationData is Map<String, dynamic>) {
            double? latitude, longitude;
            
            if (locationData.containsKey('latitude') && locationData.containsKey('longitude')) {
              latitude = locationData['latitude'] is double 
                  ? locationData['latitude'] 
                  : double.tryParse(locationData['latitude'].toString());
              
              longitude = locationData['longitude'] is double 
                  ? locationData['longitude'] 
                  : double.tryParse(locationData['longitude'].toString());
              
              if (latitude != null && longitude != null) {
                // Add a marker for client location
                final clientLocation = LatLng(latitude, longitude);
                
                setState(() {
                  // Initialize map with client location
                  _initialCameraPosition = CameraPosition(
                    target: clientLocation,
                    zoom: 15.0,
                  );
                  
                  // Add client marker
                  _markers = {
                    Marker(
                      markerId: const MarkerId('clientLocation'),
                      position: clientLocation,
                      icon: BitmapDescriptor.defaultMarkerWithHue(
                        BitmapDescriptor.hueAzure,
                      ),
                      infoWindow: InfoWindow(
                        title: 'موقع العميل',
                        snippet: clientDetails['address'] ?? '',
                      ),
                    ),
                  };
                });
                
                print('Successfully set up client location on map: $latitude, $longitude');
              } else {
                print('Invalid latitude or longitude values in client location data');
              }
            } else {
              print('Location data missing required latitude/longitude fields');
            }
          } else if (locationData is String) {
            print('Location data is a string reference, not coordinates: $locationData');
          } else {
            print('Unknown location data format: ${locationData.runtimeType}');
          }
        } catch (locationError) {
          print('Error processing client location data: $locationError');
        }
      } else {
        print('No location data found in client details');
      }
      
      // تحميل معلومات طلب النقل الخاص بالعميل (إن وجد)
            
      // Handle client location from clientDetails if available
      if (clientDetails.containsKey('location') && clientDetails['location'] != null) {
        var locationData = clientDetails['location'];
        print('Client location data found: $locationData');
        
        // If we have location data, initialize client map markers
        try {
          // Extract latitude and longitude from the location data
          if (locationData is Map<String, dynamic>) {
            double? latitude, longitude;
            
            if (locationData.containsKey('latitude') && locationData.containsKey('longitude')) {
              latitude = locationData['latitude'] is double 
                  ? locationData['latitude'] 
                  : double.tryParse(locationData['latitude'].toString());
              
              longitude = locationData['longitude'] is double 
                  ? locationData['longitude'] 
                  : double.tryParse(locationData['longitude'].toString());
              
              if (latitude != null && longitude != null) {
                // Add a marker for client location
                final clientLocation = LatLng(latitude, longitude);
                
                setState(() {
                  // Initialize map with client location
                  _initialCameraPosition = CameraPosition(
                    target: clientLocation,
                    zoom: 15.0,
                  );
                  
                  // Add client marker
                  _markers = {
                    Marker(
                      markerId: const MarkerId('clientLocation'),
                      position: clientLocation,
                      icon: BitmapDescriptor.defaultMarkerWithHue(
                        BitmapDescriptor.hueAzure,
                      ),
                      infoWindow: InfoWindow(
                        title: 'موقع العميل',
                        snippet: clientDetails['address'] ?? '',
                      ),
                    ),
                  };
                });
                
                print('Successfully set up client location on map: $latitude, $longitude');
              } else {
                print('Invalid latitude or longitude values in client location data');
              }
            } else {
              print('Location data missing required latitude/longitude fields');
            }
          } else if (locationData is String) {
            print('Location data is a string reference, not coordinates: $locationData');
          } else {
            print('Unknown location data format: ${locationData.runtimeType}');
          }        } catch (locationError) {
          print('Error processing client location data: $locationError');
        }
      } else {
        print('No location data found in client details');
      }
      // تحميل معلومات طلب النقل الخاص بالعميل (إن وجد)
      final transportDetails = await _notificationService
          .getClientTransportRequestDetails(widget.clientId);

      if (transportDetails != null &&
          transportDetails['hasLocationData'] == true) {
        // استخراج معلومات النقل
        setState(() {
          _hasTransportRequestData = true;

          // معلومات الموقع
          if (transportDetails.containsKey('originLocation')) {
            final originMap =
                transportDetails['originLocation'] as Map<String, dynamic>;
            _originLocation = LatLng(
              originMap['latitude'] as double,
              originMap['longitude'] as double,
            );
          }

          if (transportDetails.containsKey('destinationLocation')) {
            final destMap =
                transportDetails['destinationLocation'] as Map<String, dynamic>;
            _destinationLocation = LatLng(
              destMap['latitude'] as double,
              destMap['longitude'] as double,
            );
          }

          // معلومات إضافية
          _originName = transportDetails['originName'] ?? 'نقطة الانطلاق';
          _destinationName = transportDetails['destinationName'] ?? 'الوجهة';
          _distanceText = transportDetails['distanceText'] ?? '';
          _durationText = transportDetails['durationText'] ?? '';

          // تأكد من أن السعر هو رقم عشري
          try {
            var priceValue = transportDetails['price'];
            if (priceValue is int) {
              _price = priceValue.toDouble();
            } else if (priceValue is double) {
              _price = priceValue;
            } else if (priceValue is String) {
              _price = double.tryParse(priceValue) ?? 0.0;
            } else {
              _price = 0.0;
            }
          } catch (e) {
            print('Error converting price: $e');
            _price = 0.0;
          }

          _vehicleType = transportDetails['vehicleType'] ?? '';

          // إعداد موقع الكاميرا الأولي على الخريطة
          if (_originLocation != null && _destinationLocation != null) {
            final double avgLat =
                (_originLocation!.latitude + _destinationLocation!.latitude) /
                2;
            final double avgLng =
                (_originLocation!.longitude + _destinationLocation!.longitude) /
                2;

            // حساب مستوى التكبير بناءً على المسافة
            final double latDiff =
                (_originLocation!.latitude - _destinationLocation!.latitude)
                    .abs();
            final double lngDiff =
                (_originLocation!.longitude - _destinationLocation!.longitude)
                    .abs();
            final double maxDiff = latDiff > lngDiff ? latDiff : lngDiff;
            final double zoom =
                maxDiff > 0.1 ? 10.0 : (maxDiff > 0.05 ? 12.0 : 14.0);

            _initialCameraPosition = CameraPosition(
              target: LatLng(avgLat, avgLng),
              zoom: zoom,
            );

            // إضافة العلامات على الخريطة
            _markers = {
              // علامة نقطة الانطلاق
              Marker(
                markerId: const MarkerId('origin'),
                position: _originLocation!,
                icon: BitmapDescriptor.defaultMarkerWithHue(
                  BitmapDescriptor.hueGreen,
                ),
                infoWindow: InfoWindow(
                  title: 'نقطة الانطلاق',
                  snippet: _originName,
                ),
              ),
              // علامة الوجهة
              Marker(
                markerId: const MarkerId('destination'),
                position: _destinationLocation!,
                icon: BitmapDescriptor.defaultMarkerWithHue(
                  BitmapDescriptor.hueRed,
                ),
                infoWindow: InfoWindow(
                  title: 'الوجهة',
                  snippet: _destinationName,
                ),
              ),
            };
          }
        });
      }

      setState(() {
        _clientDetails = clientDetails;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = 'فشل في تحميل بيانات العميل: $e';
        _isLoading = false;
      });
    }
  }

  Future<void> _makePhoneCall(String phoneNumber) async {
    final Uri phoneUri = Uri(scheme: 'tel', path: phoneNumber);
    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('لا يمكن الاتصال بهذا الرقم'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _sendEmail(String email) async {
    final Uri emailUri = Uri(scheme: 'mailto', path: email);
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('لا يمكن فتح تطبيق البريد الإلكتروني'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('معلومات العميل'),
        backgroundColor: const Color(0xFF8B5CF6),
        foregroundColor: Colors.white,
        centerTitle: true,
      ),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : _errorMessage != null
              ? Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(
                      Icons.error_outline,
                      size: 60,
                      color: Colors.red,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      _errorMessage!,
                      style: const TextStyle(fontSize: 16),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: _loadClientDetails,
                      child: const Text('إعادة المحاولة'),
                    ),
                  ],
                ),
              )
              : SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Profile Card
                      Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              // Profile Picture
                              CircleAvatar(
                                radius: 50,
                                backgroundColor: const Color(0xFFE9D5FF),
                                backgroundImage:
                                    _clientDetails['profilePicture'] != null &&
                                            _clientDetails['profilePicture']
                                                .isNotEmpty
                                        ? NetworkImage(
                                          _clientDetails['profilePicture'],
                                        )
                                        : null,
                                child:
                                    _clientDetails['profilePicture'] == null ||
                                            _clientDetails['profilePicture']
                                                .isEmpty
                                        ? const Icon(
                                          Icons.person,
                                          size: 60,
                                          color: Color(0xFF8B5CF6),
                                        )
                                        : null,
                              ),
                              const SizedBox(height: 16),
                              // Name
                              Text(
                                _clientDetails['name'] ?? 'عميل',
                                style: const TextStyle(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 8),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Contact Information
                      Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'معلومات الاتصال',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                  color: Color(0xFF8B5CF6),
                                ),
                              ),
                              const Divider(),
                              const SizedBox(height: 8),
                              _buildContactTile(
                                icon: Icons.email,
                                title: 'البريد الإلكتروني',
                                value: _clientDetails['email'] ?? 'غير متوفر',
                                onTap:
                                    _clientDetails['email'] != null &&
                                            _clientDetails['email'].isNotEmpty
                                        ? () =>
                                            _sendEmail(_clientDetails['email'])
                                        : null,
                              ),
                              _buildContactTile(
                                icon: Icons.phone,
                                title: 'رقم الهاتف',
                                value: _clientDetails['phone'] ?? 'غير متوفر',
                                onTap:
                                    _clientDetails['phone'] != null &&
                                            _clientDetails['phone'].isNotEmpty
                                        ? () => _makePhoneCall(
                                          _clientDetails['phone'],
                                        )
                                        : null,
                              ),
                              _buildContactTile(
                                icon: Icons.location_on,
                                title: 'العنوان',
                                value: _clientDetails['address'] ?? 'غير متوفر',
                              ),
                            ],
                          ),
                        ),                      ),
                      const SizedBox(height: 16),

                      // إضافة قسم لموقع العميل إذا كان متاحاً
                      if (_initialCameraPosition != null && _markers.isNotEmpty && !_hasTransportRequestData) ...[
                        Card(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          elevation: 4,
                          child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Row(
                          children: [
                            Icon(
                              Icons.location_on,
                              color: const Color(0xFF8B5CF6),
                              size: 24,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'موقع العميل',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Color(0xFF8B5CF6),
                              ),
                            ),
                          ],
                        ),
                      ),
                      Container(
                        height: 200,
                        clipBehavior: Clip.antiAlias,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.vertical(
                            bottom: Radius.circular(16),
                          ),
                        ),
                        child: GoogleMap(
                          initialCameraPosition: _initialCameraPosition!,
                          markers: _markers,
                          myLocationEnabled: false,
                          myLocationButtonEnabled: false,
                          zoomControlsEnabled: true,
                          mapToolbarEnabled: true,
                          onMapCreated: (controller) {
                            setState(() {
                              _mapController = controller;
                            });
                          },
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: ElevatedButton.icon(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            foregroundColor: Colors.white,
                            minimumSize: Size(double.infinity, 50),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                          onPressed: () {
                            // Get the first marker (client location)
                            final clientMarker = _markers.first;
                            _openInGoogleMaps(clientMarker.position);
                          },
                          icon: const Icon(Icons.navigation),
                          label: const Text(
                            'الملاحة إلى موقع العميل',
                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          ),                        ),
                      ),
                    ],                  ),
                ),
                const SizedBox(height: 16),
                      ],
              ],

              // إضافة قسم للخريطة عندما تكون بيانات النقل متاحة
                              ),
                              Container(
                                height: 200,
                                clipBehavior: Clip.antiAlias,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.vertical(
                                    bottom: Radius.circular(16),
                                  ),
                                ),
                                child: GoogleMap(
                                  initialCameraPosition: _initialCameraPosition!,
                                  markers: _markers,
                                  myLocationEnabled: false,
                                  myLocationButtonEnabled: false,
                                  zoomControlsEnabled: true,
                                  mapToolbarEnabled: true,
                                  onMapCreated: (controller) {
                                    setState(() {
                                      _mapController = controller;
                                    });
                                  },
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: ElevatedButton.icon(
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.green,
                                    foregroundColor: Colors.white,
                                    minimumSize: Size(double.infinity, 50),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                  ),
                                  onPressed: () {
                                    // Get the first marker (client location)
                                    final clientMarker = _markers.first;
                                    _openInGoogleMaps(clientMarker.position);
                                  },
                                  icon: const Icon(Icons.navigation),
                                  label: const Text(
                                    'الملاحة إلى موقع العميل',
                                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 16),
                      ],
                      ],

// إضافة قسم للخريطة عندما تكون بيانات النقل متاحة
                      if (_hasTransportRequestData) ...[
                        // معلومات النقل
                        Card(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          elevation: 4,
                          child: Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Icon(
                                      Icons.local_shipping,
                                      color: const Color(0xFF8B5CF6),
                                      size: 24,
                                    ),
                                    const SizedBox(width: 8),
                                    Text(
                                      'معلومات خدمة النقل',
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                        color: Color(0xFF8B5CF6),
                                      ),
                                    ),
                                  ],
                                ),
                                const Divider(),
                                const SizedBox(height: 12),

                                // نوع المركبة والسعر
                                if (_vehicleType.isNotEmpty || _price > 0) ...[
                                  Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      if (_vehicleType.isNotEmpty)
                                        _buildInfoItem(
                                          icon: Icons.directions_car,
                                          title: 'نوع المركبة',
                                          value: _vehicleType,
                                        ),
                                      if (_price > 0)
                                        _buildInfoItem(
                                          icon: Icons.attach_money,
                                          title: 'التكلفة',
                                          value:
                                              '${_price.toStringAsFixed(0)} د.ج',
                                          isHighlighted: true,
                                        ),
                                    ],
                                  ),
                                  const SizedBox(height: 16),
                                ],

                                // المسافة والمدة
                                if (_distanceText.isNotEmpty ||
                                    _durationText.isNotEmpty) ...[
                                  Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      if (_distanceText.isNotEmpty)
                                        _buildInfoItem(
                                          icon: Icons.space_bar,
                                          title: 'المسافة',
                                          value: _distanceText,
                                        ),
                                      if (_durationText.isNotEmpty)
                                        _buildInfoItem(
                                          icon: Icons.timer,
                                          title: 'المدة التقديرية',
                                          value: _durationText,
                                        ),
                                    ],
                                  ),
                                  const SizedBox(height: 16),
                                ],

                                // نقطة الانطلاق والوجهة
                                _buildLocationItem(
                                  icon: Icons.location_on,
                                  title: 'نقطة الانطلاق',
                                  value:
                                      _originName.isNotEmpty
                                          ? _originName
                                          : 'موقع العميل',
                                  color: Colors.green,
                                ),
                                const SizedBox(height: 8),
                                _buildLocationItem(
                                  icon: Icons.flag,
                                  title: 'الوجهة',
                                  value:
                                      _destinationName.isNotEmpty
                                          ? _destinationName
                                          : 'وجهة الطلب',
                                  color: Colors.red,
                                ),
                              ],
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // خريطة المسار
                        Card(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          elevation: 4,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.map,
                                      color: const Color(0xFF8B5CF6),
                                      size: 24,
                                    ),
                                    const SizedBox(width: 8),
                                    Text(
                                      'المسار على الخريطة',
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                        color: Color(0xFF8B5CF6),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              Container(
                                height: 300,
                                clipBehavior: Clip.antiAlias,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.vertical(
                                    bottom: Radius.circular(16),
                                  ),
                                ),
                                child: GoogleMap(
                                  initialCameraPosition:
                                      _initialCameraPosition ??
                                      CameraPosition(
                                        target: LatLng(
                                          36.7538,
                                          3.0588,
                                        ), // الجزائر العاصمة كموقع افتراضي
                                        zoom: 12,
                                      ),
                                  markers: _markers,
                                  myLocationEnabled: false,
                                  myLocationButtonEnabled: false,
                                  zoomControlsEnabled: true,
                                  mapToolbarEnabled: true,
                                  onMapCreated: (controller) {
                                    setState(() {
                                      _mapController = controller;
                                    });
                                  },
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 16),

                        // أزرار الإجراءات
                        Row(
                          children: [
                            // زر للملاحة إلى موقع العميل
                            Expanded(
                              child: ElevatedButton.icon(
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.blue,
                                  foregroundColor: Colors.white,
                                  padding: const EdgeInsets.all(16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                ),
                                onPressed:
                                    _originLocation != null
                                        ? () =>
                                            _openInGoogleMaps(_originLocation!)
                                        : null,
                                icon: const Icon(Icons.navigation),
                                label: const Text(
                                  'الملاحة إلى العميل',
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 12),
                            // زر للملاحة إلى الوجهة
                            Expanded(
                              child: ElevatedButton.icon(
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.green,
                                  foregroundColor: Colors.white,
                                  padding: const EdgeInsets.all(16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                ),
                                onPressed:
                                    _destinationLocation != null
                                        ? () => _openInGoogleMaps(
                                          _destinationLocation!,
                                        )
                                        : null,
                                icon: const Icon(Icons.flag),
                                label: const Text(
                                  'الملاحة إلى الوجهة',
                                  style: TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],

                      // Call to Action - Phone Call Button
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF8B5CF6),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.all(16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                          onPressed:
                              _clientDetails['phone'] != null &&
                                      _clientDetails['phone'].isNotEmpty
                                  ? () =>
                                      _makePhoneCall(_clientDetails['phone'])
                                  : null,
                          icon: const Icon(Icons.phone),
                          label: const Text(
                            'الاتصال بالعميل',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),

                      const SizedBox(height: 12),

                      // Communication Actions Row - Chat and WhatsApp
                      Row(
                        children: [
                          // Chat button
                          Expanded(
                            child: ElevatedButton.icon(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.blue,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              onPressed:
                                  () => _startChat(
                                    _clientDetails['id'] ?? widget.clientId,
                                    _clientDetails['name'] ?? 'عميل',
                                  ),
                              icon: const Icon(Icons.chat),
                              label: const Text(
                                'محادثة',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),

                          // WhatsApp button
                          Expanded(
                            child: ElevatedButton.icon(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: const Color(
                                  0xFF25D366,
                                ), // WhatsApp color
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              onPressed:
                                  _clientDetails['phone'] != null &&
                                          _clientDetails['phone'].isNotEmpty
                                      ? () =>
                                          _openWhatsApp(_clientDetails['phone'])
                                      : null,
                              icon: const Icon(Icons.message),
                              label: const Text(
                                'واتساب',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 12),

                      // Communication Actions Row
                      Row(
                        children: [
                          // Chat button
                          Expanded(
                            child: ElevatedButton.icon(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.blue,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              onPressed:
                                  () => _startChat(
                                    _clientDetails['id'] ?? widget.clientId,
                                    _clientDetails['name'] ?? 'عميل',
                                  ),
                              icon: const Icon(Icons.chat),
                              label: const Text(
                                'محادثة',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),

                          // WhatsApp button
                          Expanded(
                            child: ElevatedButton.icon(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: const Color(
                                  0xFF25D366,
                                ), // WhatsApp color
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              onPressed:
                                  _clientDetails['phone'] != null &&
                                          _clientDetails['phone'].isNotEmpty
                                      ? () =>
                                          _openWhatsApp(_clientDetails['phone'])
                                      : null,
                              icon: const Icon(Icons.message),
                              label: const Text(
                                'واتساب',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 12),

                      // Communication Actions Row
                      Row(
                        children: [
                          // Chat button
                          Expanded(
                            child: ElevatedButton.icon(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.blue,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              onPressed:
                                  () => _startChat(
                                    _clientDetails['id'] ?? widget.clientId,
                                    _clientDetails['name'] ?? 'عميل',
                                  ),
                              icon: const Icon(Icons.chat),
                              label: const Text(
                                'محادثة',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),

                          // WhatsApp button
                          Expanded(
                            child: ElevatedButton.icon(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: const Color(
                                  0xFF25D366,
                                ), // WhatsApp color
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              onPressed:
                                  _clientDetails['phone'] != null &&
                                          _clientDetails['phone'].isNotEmpty
                                      ? () =>
                                          _openWhatsApp(_clientDetails['phone'])
                                      : null,
                              icon: const Icon(Icons.message),
                              label: const Text(
                                'واتساب',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
    );
  }

  Widget _buildContactTile({
    required IconData icon,
    required String title,
    required String value,
    VoidCallback? onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 8.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(icon, color: const Color(0xFF8B5CF6), size: 24),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(fontSize: 14, color: Colors.grey),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    value,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight:
                          onTap != null ? FontWeight.bold : FontWeight.normal,
                      color: onTap != null ? const Color(0xFF8B5CF6) : null,
                      decoration:
                          onTap != null ? TextDecoration.underline : null,
                    ),
                  ),
                ],
              ),
            ),
            if (onTap != null)
              const Icon(
                Icons.arrow_forward_ios,
                size: 16,
                color: Color(0xFF8B5CF6),
              ),
          ],
        ),
      ),
    );
  }

  // دالة لعرض عنصر معلومات في قسم النقل
  Widget _buildInfoItem({
    required IconData icon,
    required String title,
    required String value,
    bool isHighlighted = false,
  }) {
    return Flexible(
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color:
              isHighlighted
                  ? const Color(0xFF8B5CF6).withOpacity(0.1)
                  : Colors.grey.withOpacity(0.1),
          borderRadius: BorderRadius.circular(10),
          border:
              isHighlighted
                  ? Border.all(
                    color: const Color(0xFF8B5CF6).withOpacity(0.3),
                    width: 1.5,
                  )
                  : null,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  icon,
                  size: 16,
                  color:
                      isHighlighted
                          ? const Color(0xFF8B5CF6)
                          : Colors.grey[700],
                ),
                const SizedBox(width: 6),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 12,
                    color:
                        isHighlighted
                            ? const Color(0xFF8B5CF6)
                            : Colors.grey[700],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 6),
            Text(
              value,
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: isHighlighted ? const Color(0xFF8B5CF6) : Colors.black87,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // دالة لعرض عنصر موقع (نقطة انطلاق أو وجهة)
  Widget _buildLocationItem({
    required IconData icon,
    required String title,
    required String value,
    required Color color,
  }) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 10, horizontal: 12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.5), width: 1),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: color.withOpacity(0.2),
              shape: BoxShape.circle,
            ),
            child: Icon(icon, size: 20, color: color),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[700],
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  value,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  } // دالة لفتح الموقع في خرائط جوجل

  Future<void> _openInGoogleMaps(LatLng location) async {
    final url =
        'https://www.google.com/maps/dir/?api=1&destination=${location.latitude},${location.longitude}';
    final Uri uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('لا يمكن فتح تطبيق الخرائط'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // دالة لفتح محادثة واتساب مع العميل
  Future<void> _openWhatsApp(String phoneNumber) async {
    // إزالة أي أحرف غير رقمية من رقم الهاتف
    String formattedNumber = phoneNumber.replaceAll(RegExp(r'[^\d]'), '');

    // إضافة رمز الدولة إذا لم يكن موجوداً (افتراضياً الجزائر +213)
    if (!formattedNumber.startsWith('213') &&
        !formattedNumber.startsWith('+213')) {
      if (formattedNumber.startsWith('0')) {
        formattedNumber = '213${formattedNumber.substring(1)}';
      } else {
        formattedNumber = '213$formattedNumber';
      }
    }

    // إنشاء رابط واتساب
    final url = 'https://wa.me/$formattedNumber';
    final Uri uri = Uri.parse(url);

    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('لا يمكن فتح تطبيق واتساب'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // دالة لبدء محادثة داخل التطبيق مع العميل
  void _startChat(String clientId, String clientName) async {
    // الحصول على معرف المزود المسجل حالياً
    final currentUser = _auth.currentUser;
    if (currentUser == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('يجب تسجيل الدخول أولاً'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    final providerId = currentUser.uid;
    final ChatService chatService = ChatService(providerId);

    try {
      // إنشاء أو الحصول على معرف المحادثة
      final chatId = await chatService.createOrGetChat(
        userId1: providerId,
        userId2: clientId,
        userName1: currentUser.displayName ?? 'مزود الخدمة',
        userName2: _clientDetails['name'] ?? 'عميل',
        userImage1: currentUser.photoURL,
        userImage2: _clientDetails['profilePicture'],
      );

      if (mounted) {
        // الانتقال إلى شاشة المحادثة
        Navigator.push(
          context,
          MaterialPageRoute(
            builder:
                (context) => ChatScreen(
                  chatId: chatId,
                  otherUserId: clientId,
                  otherUserName: clientName,
                ),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل في بدء المحادثة: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
